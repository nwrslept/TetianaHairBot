import os
from aiogram import  F, types, Router, Bot
from aiogram.filters import CommandStart, Command, or_f

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import clear_cart, get_cart, orm_get_actions, user_db  


from database.orm_query import check_isbusy, orm_add_schedule, orm_get_product, orm_get_products, orm_get_schedule, orm_update_schedule, add_to_cart, get_cart, remove_from_cart
from sqlalchemy.ext.asyncio import AsyncSession
import kbds.user_markups as nav

from kbds.inline import get_callback_btns
from database.orm_query import Database

from translations import _

user_private_router = Router()
db = Database('my_base.db')

class OrderInfo(StatesGroup):
    full_name = State()
    address = State()
    phone_number = State()


class Add(StatesGroup):
    id_product = State()
    full_name = State()
    index_adress = State()
    number_phon = State()

    product_for_change = None

admin_ids = os.getenv("ADMIN_ID").split(",")
admin_ids = [int(admin_id) for admin_id in admin_ids]


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    if not db.user_exists(message.from_user.id):
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:\nVyberte jazyk:", reply_markup=nav.langMenu)
    else:
        lang = db.get_lang(message.from_user.id)
        await message.answer(_("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!", lang), reply_markup=nav.start_kb(lang))
        
@user_private_router.callback_query(F.data.startswith('lang_'))
async def setLanguage(callback: types.callback_query):
    if len(callback.data) > 5:
        lang = callback.data[5:]
        if not db.user_exists(callback.from_user.id):
            lang = callback.data[5:]
            db.add_user(callback.from_user.id, lang)
            await callback.message.answer(_("–£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è!", lang), reply_markup=nav.start_kb(lang))
        else:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ –º–æ–≤—É
            db.update_lang(callback.from_user.id, lang)  # –û–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É
            await callback.message.answer(_("–ú–æ–≤—É —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!", lang), reply_markup=nav.start_kb(lang))
    else:
        # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ `callback.data` –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        await callback.message.answer(_("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–±–æ—Ä—É –º–æ–≤–∏.", lang))


@user_private_router.message(Command('id'))
async def cmd_id(message: types.Message):
    await message.edit_text(f'{message.from_user.id}')

@user_private_router.message(or_f(F.text.lower () == "–Ω–∞–π—á–∞—Å—Ç—ñ—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è‚ùì", F.text.lower () == 'nejƒçastƒõj≈°√≠ dotazy‚ùì'))
async def info(message: types.Message):
    lang = db.get_lang(message.from_user.id)
    await message.answer(_("–ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:",lang))
    await message.answer_photo("AgACAgIAAxkBAAIKqGbxqjyD2CbbWjlkekxraYUZktcVAAL55jEbCtWRS3D4js_QxFIoAQADAgADeQADNgQ")
    await message.answer(_('–û–ø–∏—Å –ø—Ä–æ—Ü–µ–¥—É—Ä:',lang), reply_markup=nav.info_kb(lang))

@user_private_router.callback_query(F.data.startswith('_botox'))
async def botox(callback: types.callback_query):
    lang = db.get_lang(callback.from_user.id)
    await callback.message.edit_text(_('–ë–æ—Ç–æ–∫—Å - —Ü–µ...',lang),reply_markup=nav.back_kb(lang))

@user_private_router.callback_query(F.data.startswith('_keratin'))
async def keratin(callback: types.callback_query):
    lang = db.get_lang(callback.from_user.id)
    await callback.message.edit_text(_('–ö–µ—Ä–∞—Ç–∏–Ω - —Ü–µ...', lang),reply_markup=nav.back_kb(lang))

@user_private_router.callback_query(F.data.startswith('_collagen'))
async def collagen(callback: types.callback_query):
    lang = db.get_lang(callback.from_user.id)
    await callback.message.edit_text(_('–ö–æ–ª–ª–∞–≥–µ–Ω - —Ü–µ...', lang),reply_markup=nav.back_kb(lang))

@user_private_router.callback_query(F.data.startswith('_coldreg'))
async def coldreg(callback: types.callback_query):
    lang = db.get_lang(callback.from_user.id)
    await callback.message.edit_text(_('–•–æ–ª–æ–¥–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è - —Ü–µ...',lang),reply_markup=nav.back_kb(lang))

@user_private_router.callback_query(F.data.startswith('_back'))
async def infoback(callback: types.callback_query):
    lang = db.get_lang(callback.from_user.id)
    await callback.message.edit_text(_('–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:',lang), reply_markup=nav.info_kb(lang))




@user_private_router.message(F.text == ("–ê–∫—Ü—ñ—óüéÅ"))
async def starring_at_actions(message: types.Message, session: AsyncSession):
    for action in await orm_get_actions(session):
        await message.answer(action.description)

@user_private_router.message(F.text == ("AkceüéÅ"))
async def starring_at_actionscz(message: types.Message, session: AsyncSession):
    for action in await orm_get_actions(session):
        await message.answer(action.description)
    

@user_private_router.message(or_f(F.text.lower() == "–∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—Éüá∫üá¶/üá®üáø", F.text.lower() == 'zmƒõ≈àte jazyküá∫üá¶/üá®üáø'))
async def menu_cmd(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É\nVyber jazyk:", reply_markup=nav.langMenu)

@user_private_router.message((F.text.lower() == "–∑–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–∏–π–æ–ºüìÖ"))
async def schedule(message: types.Message, session: AsyncSession):
    schedules = await check_isbusy(session)
    if schedules:  # –Ø–∫—â–æ —î –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏
        for schedule in schedules:
            await message.answer(f'–î–æ—Å—Ç—É–ø–Ω–∞ –¥–∞—Ç–∞:\n{schedule.date}üìÖ\n{schedule.time}üïí',
                                 reply_markup=get_callback_btns(btns={
                                      '–∑–∞–ø–∏—Å–∞—Ç–∏—Å—å': f'signup_{schedule.id}'
                                 }))
    await message.answer('–ê —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –∑–∞–º–æ–≤–∏—Ç–∏ –º–∞–π—Å—Ç—Ä–∞ –¥–æ —Å–æ–±–µ –¥–æ–¥–æ–º—É: @Tetiana_Senkiv')

@user_private_router.message((F.text.lower() == "domluvit si sch≈ØzkuüìÖ"))
async def schedule1(message: types.Message, session: AsyncSession):
    schedules = await check_isbusy(session)
    if schedules:  # –Ø–∫—â–æ —î –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏
        for schedule in schedules:       
            await message.answer(f'Dostupn√© datum: \n{schedule.date}üìÖ\n{schedule.time}üïí',
                                 reply_markup=get_callback_btns(btns={
                                      'p≈ôihl√°sit se': f'signup1_{schedule.id}'
                                 }))
    await message.answer('A mistra si m≈Ø≈æete objednat i dom≈Ø: @Tetiana_Senkiv')


@user_private_router.message(or_f(F.text == '–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥üì∞', F.text == 'Seznam slu≈æebüì∞'))
async def aboutus(message: types.Message):
    media = [
        InputMediaPhoto(media="AgACAgIAAxkBAAIKqGbxqjyD2CbbWjlkekxraYUZktcVAAL55jEbCtWRS3D4js_QxFIoAQADAgADeQADNgQ"),
        InputMediaPhoto(media="AgACAgIAAxkBAAIKqmbxqj99JQXBuv8L4GVX2svTNwxcAAL65jEbCtWRS-Af5JJ5QpYYAQADAgADeQADNgQ"),
        InputMediaPhoto(media="AgACAgIAAxkBAAIKrGbxqkI9RUXcgXWSIjrXqXDrTjMYAAL75jEbCtWRS3YYBv5x6iWuAQADAgADeQADNgQ"),
        InputMediaPhoto(media="AgACAgIAAxkBAAIKpmbxqjBukuSmpCIXdA0U5XDu6q-6AAL45jEbCtWRSxHq9ahIuqL3AQADAgADeQADNgQ"),
    ]
    await message.answer_media_group(media=media)

# @user_private_router.message(F.photo)
# async def photo(message: types.Message):
#     photo_data = message.photo[-1]
#     await message.answer(f"{photo_data}")

@user_private_router.message(or_f(F.text == '–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤—è–∑–æ–∫‚òéÔ∏è', F.text == 'Zpƒõtn√° vazba‚òéÔ∏è'))
async def feedback(message: types.Message):
    await message.answer('Telegram: @Tetiana_Senkiv\nPhone:+420792711477/+380685187690\nInstagram:https://www.instagram.com/tetiana_hair_beauty?igsh=MWV3eWdoMjlyejk4dw==')


@user_private_router.message(or_f(F.text == "–í—ñ–¥–≥—É–∫–∏‚≠ê", F.text == 'Recenze‚≠ê'))
async def reviews(message: types.Message):
    lang = db.get_lang(message.from_user.id)
    media = [
        InputMediaPhoto(media=_("AgACAgIAAxkBAAIKqGbxqjyD2CbbWjlkekxraYUZktcVAAL55jEbCtWRS3D4js_QxFIoAQADAgADeQADNgQ", lang)),
    ]
    await message.answer_media_group(media=media)






@user_private_router.message(or_f(F.text.lower() == "–∑–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –¥–æ–≥–ª—è–¥üõí", F.text.lower() == 'objednejte si odbornou p√©ƒçiüõí'))
async def buy(message: types.Message, session: AsyncSession, state: FSMContext):
    lang = db.get_lang(message.from_user.id)
    products = await orm_get_products(session)
    
    # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –≤ —Å—Ç–∞–Ω
    await state.update_data(products=[product.id for product in products], current_index=0)

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–∏–π –ø—Ä–æ–¥—É–∫—Ç
    if products:
        reply_message = await show_product(message, products[0], lang, 0)
        await state.update_data(reply_message_id=reply_message.message_id)

async def show_product(message: types.Message, product, lang, index):
    
    if lang == 'ua':
        reply_message = await message.answer_photo(
        product.image,
        caption=f"{product.name}\n{product.description}\n{round(product.price, 2)}kƒç",
        reply_markup=get_callback_btns(
            btns={
                _("‚¨ÖÔ∏è", lang): f"prev_{index}",
                _("‚û°Ô∏è", lang): f"next_{index}",
                _("–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏", lang): f"add_to_cart_{product.id}",
                _("–ö–æ—Ä–∑–∏–Ω–∞üõí", lang): "viewcart_",
                
            }
        ),
    )
    else:
        reply_message = await message.answer_photo(
        product.image,
        caption=f"{product.namecz}\n{product.descriptioncz}\n{round(product.price, 2)}kƒç",
        reply_markup=get_callback_btns(
            btns={
                _("‚¨ÖÔ∏è", lang): f"prev_{index}",
                _("‚û°Ô∏è", lang): f"next_{index}",
                _("–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏", lang): f"add_to_cart_{product.id}",
                _("–ö–æ—Ä–∑–∏–Ω–∞üõí", lang): "viewcart_",
                
            }
        ),
    )

    return reply_message  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

@user_private_router.callback_query(F.data.startswith('prev_'))
async def show_previous(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    lang = db.get_lang(callback.from_user.id)
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    products = data.get('products', [])

    if current_index > 0:
        current_index -= 1
        await state.update_data(current_index=current_index)
        await update_product_message(callback.message, products[current_index], lang, current_index, session)

@user_private_router.callback_query(F.data.startswith('next_'))
async def show_next(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    lang = db.get_lang(callback.from_user.id)
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    products = data.get('products', [])

    if current_index < len(products) - 1:
        current_index += 1
        await state.update_data(current_index=current_index)
        await update_product_message(callback.message, products[current_index], lang, current_index, session)

async def update_product_message(message: types.Message, product_id: int, lang, index: int, session: AsyncSession):
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞ ID
    product = await orm_get_product(session, product_id)
    
    if product:
        if lang == 'ua': # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–æ–¥—É–∫—Ç —ñ—Å–Ω—É—î
            await message.edit_media(
                types.InputMediaPhoto(
                    media=product.image,  # –ó–∞–º—ñ—Å—Ç—å product.image –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ media
                    caption=f"{product.name}\n{product.description}\n{round(product.price, 2)}kƒç"
                ),
                reply_markup=get_callback_btns(
                    btns={
                        _("‚¨ÖÔ∏è", lang): f"prev_{index}",
                        _("‚û°Ô∏è", lang): f"next_{index}",
                        _("–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏", lang): f"add_to_cart_{product.id}",
                        _("–ö–æ—Ä–∑–∏–Ω–∞üõí", lang): "viewcart_",
                    }
                )
            )
        else:
            await message.edit_media(
            types.InputMediaPhoto(
                media=product.image,  # –ó–∞–º—ñ—Å—Ç—å product.image –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ media
                caption=f"{product.namecz}\n{product.descriptioncz}\n{round(product.price, 2)}kƒç"
            ),
            reply_markup=get_callback_btns(
                btns={
                    _("‚¨ÖÔ∏è", lang): f"prev_{index}",
                    _("‚û°Ô∏è", lang): f"next_{index}",
                    _("–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏", lang): f"add_to_cart_{product.id}",
                    _("–ö–æ—Ä–∑–∏–Ω–∞üõí", lang): "viewcart_",
                }
            )
        )







@user_private_router.callback_query(F.data.startswith('remove_from_cart_'))
async def remove_from_cart1(callback: types.CallbackQuery, session: AsyncSession):
    lang = db.get_lang(callback.from_user.id)
    user_id = callback.from_user.id
    product_id = int(callback.data.split('_')[-1])
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –∫–æ—à–∏–∫–∞
    await remove_from_cart(user_id, product_id, session)
    await callback.message.answer(_("–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—Ä–∑–∏–Ω–∏", lang))


@user_private_router.callback_query(F.data.startswith('add_to_cart_'))
async def add_to_cart1(callback: types.CallbackQuery, session: AsyncSession):
    lang = db.get_lang(callback.from_user.id)
    user_id = callback.from_user.id
    product_id = int(callback.data.split('_')[-1])
    
    # –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–æ –∫–æ—Ä–∑–∏–Ω–∏ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    await add_to_cart(user_id, product_id, 1, session)
    await callback.message.answer(_("–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏!", lang))

@user_private_router.callback_query(F.data.startswith('viewcart_'))
async def view_cart(callback: types.CallbackQuery, session: AsyncSession):
    lang = db.get_lang(callback.from_user.id)
    user_id = callback.from_user.id
    
    # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–º—ñ—Å—Ç –∫–æ—à–∏–∫–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    cart_items = await get_cart(user_id, session)
    
    if not cart_items:
        await callback.message.answer(_("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è", lang))
    else:
        for item in cart_items:
            product = item.product  # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É —á–µ—Ä–µ–∑ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è
            await callback.message.answer_photo(
                product.image,
                caption=f"{product.name}\n{product.description}\n{round(product.price, 2)}kƒç",
                reply_markup=get_callback_btns(
                    btns={_("–í–∏–¥–∞–ª–∏—Ç–∏ –∑ –∫–æ—Ä–∑–∏–Ω–∏", lang): f"remove_from_cart_{product.id}"}
                ),
            )
        await callback.message.answer(_("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:",lang),
        reply_markup=get_callback_btns(
                btns={
                    _("–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", lang): f"order_{product.id}",
                }
            ))
        




@user_private_router.callback_query(F.data.startswith('signup_'))
async def delete_schedule(callback: types.callback_query, session: AsyncSession, bot: Bot):
    user = callback.from_user.username
    schedule_id= callback.data.split("_")[-1]
    schedule_for_change = await orm_get_schedule(session, int(schedule_id))
    await callback.message.answer(f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {schedule_for_change.date}, –æ {schedule_for_change.time}\
                                  \n–ß–µ–∫–∞—î–º–æ –≤–∞—Å –∑–∞ –∞–¥—Ä–µ—Å–æ—é: Hlavni 1215,\
                                  \n–ó–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é: @Tetiana_Senkiv", 
                                  reply_markup=get_callback_btns(btns={
                                     '–û—Ç—Ä–∏–º–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é': f'send_location',
                                    '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å': f'cancel_{schedule_id}',
                                 }))
    await orm_update_schedule(session, int(schedule_id), {
        "date": schedule_for_change.date,
        "time": schedule_for_change.time,
        "isbusy": True  # –ó–º—ñ–Ω—é—î–º–æ isbusy –Ω–∞ True
    })
    for admin_id in admin_ids:
        await bot.send_message(admin_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user} –∑–∞–ø–∏—Å–∞–≤—Å—è –Ω–∞ {schedule_for_change.date}, –æ {schedule_for_change.time}")
    #await orm_delete_schedule(session, int(schedule_id))

@user_private_router.callback_query(F.data.startswith('signup1_'))
async def delete_schedule1(callback: types.callback_query, session: AsyncSession, bot: Bot):
    user = callback.from_user.username
    schedule_id= callback.data.split("_")[-1]
    schedule_for_change = await orm_get_schedule(session, int(schedule_id))
    await callback.message.answer(f"√öspƒõ≈°nƒõ jste se zaregistrovali do {schedule_for_change.date}, {schedule_for_change.time}\
                                  \nƒåek√°me na v√°s na Hlavn√≠ 1215,\
                                  \nDal≈°√≠ informace: @Tetiana_Senkiv", 
                                  reply_markup=get_callback_btns(btns={
                                     'Z√≠skejte geolokaci': f'send_location',
                                    'Zru≈°it zad√°n√≠': f'cancel1_{schedule_id}',
                                 }))
    await orm_update_schedule(session, int(schedule_id), {
        "date": schedule_for_change.date,
        "time": schedule_for_change.time,
        "isbusy": True  # –ó–º—ñ–Ω—é—î–º–æ isbusy –Ω–∞ True
    })
    for admin_id in admin_ids:
        await bot.send_message(admin_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user} –∑–∞–ø–∏—Å–∞–≤—Å—è –Ω–∞ {schedule_for_change.date}, –æ {schedule_for_change.time}")

@user_private_router.callback_query(F.data.startswith('send_location'))
async def send_location(callback: types.callback_query):
    lang = db.get_lang(callback.from_user.id)
    await callback.message.answer_location(49.20317636135491, 17.541798210167258)

@user_private_router.callback_query(F.data.startswith('cancel_'))
async def cancel_schedule(callback: types.callback_query, session: AsyncSession, bot: Bot):
    schedule_id = int(callback.data.split("_")[-1])
    schedule_for_change = await orm_get_schedule(session, schedule_id)
    await orm_update_schedule(session, schedule_id, {
        "date": schedule_for_change.date,
        "time": schedule_for_change.time,
        "isbusy": False  # –ó–º—ñ–Ω—é—î–º–æ isbusy –Ω–∞ False
    })
    await callback.message.answer(f"–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å –Ω–∞ {schedule_for_change.date}, –æ {schedule_for_change.time}")
    await callback.answer("–í–∞—à –∑–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ!", show_alert=True)
    user = callback.from_user.username
    for admin_id in admin_ids:
        await bot.send_message(admin_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user} –≤—ñ–¥–º—ñ–Ω–∏–≤ –∑–∞–ø–∏—Å –Ω–∞ {schedule_for_change.date}, –æ {schedule_for_change.time}")
    schedule_data = {
        'date': schedule_for_change.date,
        'time': schedule_for_change.time
    }
    await orm_add_schedule(session, schedule_data)

@user_private_router.callback_query(F.data.startswith('cancel1_'))
async def cancel1_schedule(callback: types.callback_query, session: AsyncSession, bot: Bot):
    schedule_id = int(callback.data.split("_")[-1])
    schedule_for_change = await orm_get_schedule(session, schedule_id)
    await orm_update_schedule(session, schedule_id, {
        "date": schedule_for_change.date,
        "time": schedule_for_change.time,
        "isbusy": False  # –ó–º—ñ–Ω—é—î–º–æ isbusy –Ω–∞ False
    })
    await callback.message.answer(f"Nahr√°v√°n√≠ jste zru≈°ili dne {schedule_for_change.date}, {schedule_for_change.time}")
    await callback.answer("V√°≈° z√°znam byl zru≈°en!", show_alert=True)
    user = callback.from_user.username
    for admin_id in admin_ids:
        await bot.send_message(admin_id,f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user} –≤—ñ–¥–º—ñ–Ω–∏–≤ –∑–∞–ø–∏—Å –Ω–∞ {schedule_for_change.date}, –æ {schedule_for_change.time}")
    schedule_data = {
        'date': schedule_for_change.date,
        'time': schedule_for_change.time
    }
    await orm_add_schedule(session, schedule_data)

#FSM

@user_private_router.callback_query(F.data.startswith('order_'))
async def process_order(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    data_parts = callback.data.split('_')
    lang = db.get_lang(callback.from_user.id)

    if len(data_parts) < 2 or not data_parts[1].isdigit():
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–¥—ñ–π—Å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", show_alert=True)
        return

    product_id = int(data_parts[1])
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø—Ä–æ–¥—É–∫—Ç—É –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(product_id=product_id)
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –π–æ–≥–æ –§–Ü–û
    await callback.message.answer(_("–í–≤–µ–¥—ñ—Ç—å –§–Ü–û. (–ø–æ–≤–Ω—ñ)",lang))
    await state.set_state(OrderInfo.full_name)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –§–Ü–û



@user_private_router.message(OrderInfo.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    full_name = message.text
    lang = db.get_lang(message.from_user.id)

    await state.update_data(full_name=full_name)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –§–Ü–û –≤ —Å—Ç–∞–Ω—ñ
    
    await message.answer(_("–£–∫–∞–∂—ñ—Ç—å —ñ–Ω–¥–µ–∫—Å —ñ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏",lang))
    await state.set_state(OrderInfo.address)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –∞–¥—Ä–µ—Å–∏

@user_private_router.message(OrderInfo.address)
async def process_address(message: types.Message, state: FSMContext):
    address = message.text
    lang = db.get_lang(message.from_user.id)

    await state.update_data(address=address)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–¥—Ä–µ—Å—É –≤ —Å—Ç–∞–Ω—ñ
    
    await message.answer(_("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ—á–∏–Ω–∞—é—á–∏ –∑: +380, –∞–±–æ +420",lang))
    await state.set_state(OrderInfo.phone_number)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É

@user_private_router.message(OrderInfo.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    phone_number = message.text
    await state.update_data(phone_number=phone_number)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Å—Ç–∞–Ω—ñ

    lang = db.get_lang(message.from_user.id)
    user_data = await state.get_data()  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
    full_name = user_data.get('full_name')
    address = user_data.get('address')

    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    username = message.from_user.username if message.from_user.username else "–ù–µ–º–∞—î —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
    
    cart_items = await get_cart(message.from_user.id, session)  # –û—Ç—Ä–∏–º—É—î–º–æ –≤–º—ñ—Å—Ç –∫–æ—à–∏–∫–∞

    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    product_names = []
    for item in cart_items:
        product = item.product  # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É —á–µ—Ä–µ–∑ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è
        product_names.append(product.name)  # –î–æ–¥–∞—î–º–æ –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É –≤ —Å–ø–∏—Å–æ–∫

    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    products_message = "\n".join(product_names) if product_names else "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π."
    order_summary = (f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: @{username}\n"
                     f"–§–Ü–û: {full_name}\n"
                     f"–ê–¥—Ä–µ—Å–∞: {address}\n"
                     f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
                     f"–ü—Ä–æ–¥—É–∫—Ç–∏:\n{products_message}")

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∞–¥–º—ñ–Ω—É
    for admin_id in admin_ids:
        await bot.send_message(admin_id, order_summary)
    await message.answer(_("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ, –∑–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é: @Tetiana_Senkiv",lang))
    # –û—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫
    await clear_cart(message.from_user.id, session)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ clear_cart, —è–∫–∏–π –≤ —Å–≤–æ—é —á–µ—Ä–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î remove_from_cart

    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await state.clear()  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω







